defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /noise: loglinear # Model appeared invariant to noise schedule types in MDLM paper
  - /lr_scheduler: constant_warmup 
  - /data: kraken
  - /model: small
  - /tokenizer: wordlevel 
  - /conditioning: "no" # no / embed / prepend / cfg
  - /paths: cluster
  - /property_prediction: default
  - override hydra/launcher: submitit_slurm

experiment:
  name: "model_size_small"

mode: train
seed: 8
diffusion: absorbing_state
backbone: dit  # dit only available now (legacy mdlm)
parameterization: subs  # subs only available (legacy mdlm)
row_limit: null
debug: False


train_test_split:
  train: 0.8
  valid: 0.2

hydra:
  run:
    dir: ${paths.outputs_dir}/${experiment.name}/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: ${paths.outputs_dir}/${experiment.name}/multirun/${now:%Y-%m-%d_%H-%M-%S}
    subdir: ${hydra.job.num}_${hydra.job.override_dirname}

preprocessing:
  normalize: True
  augment: True
  augmentations_per_molecule: 10
  augmentations_max_attempts: 50
  discretize: True
  discretize_num_bins: 3
  permitted_selfies_length: 175 # Maximum SELFIES length to consider for training. This is a hard limit.

tokenizer:
  tokenizer_type: wordlevel # wordlevel / APE
  max_vocab_size: 200 # maximum vocabulary size for wordlevel tokenizer
  min_freq_for_merge: 500 # minimum frequency for merge operation in wordlevel tokenizer

checkpointing:
  save_dir: ${paths.base_dir}/checkpoints
  resume_from_ckpt: False
  resume_ckpt_path: ${paths.base_dir}/checkpoints/${experiment.name}.ckpt # Assumes the experiment name is the checkpoint name
  fresh_data: False # If True, will load cached data from the preprocessed data file
  retrain_tokenizer: False # This will retokenize the dataset with the current tokenizer settings
  retrain_ape_vocab: False

wandb:
  project: SELFIES-diffusion
  notes: testing a selfies model
  group: model_size_selection # Group runs by experiment name
  name: ${experiment.name}
  job_type: ${mode} #
  id: ${.name}_${seed}_${now:%Y%m%d_%H%M%S} 

# This is important when working with multi-GPU training, to ensure that 
# the batch size is divided evenly among all GPUs.
loader:
  global_batch_size: 64
  eval_global_batch_size: ${.global_batch_size}
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: 8 
  pin_memory: True


training:
  ema: 0.9999
  antithetic_sampling: True
  importance_sampling: False
  sampling_eps: 1e-3
  change_of_variables: False

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8

# This is the config for training the Lightning trainer model
trainer:
  _target_: lightning.Trainer
  accelerator: auto
  strategy: auto # Let lightning choose wtvr
  num_nodes: 1 # Number of machines, which might have multiple GPUs
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0 # Clip gradients to this value. Prevents exploding gradients
  precision: 'bf16-mixed' # BF16 float precision is better. CHANGE FOR LINUX
  num_sanity_val_steps: 1 # Runs 1 validation steps before training
  max_steps: 100_000 # Maximum number of training steps
  log_every_n_steps: 300 # log metrics every 10 steps
  limit_train_batches: 1.0   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 0.25    # validate on full dataset, can be used to toggle quick run
  val_check_interval: 0.25 # validate every % epoch
  #check_val_every_n_epoch: 1 # validate every epoch

eval:
  checkpoint_path: /path/to/your/checkpoint.ckpt # Path to the checkpoint for evaluation
  disable_ema: False
  generate_samples: True

sampling:
  predictor: ddpm_cache  # analytic, ddpm, ddpm_cache
  steps: 128
  noise_removal: True
  num_sample_batches: 320  # Total samples: `loader.eval_batch_size` * num_sample_batches
  num_sample_log: 2
  semi_ar: False
  num_strides: 0
  stride_length: 0
  time_conditioning: False 
  T: 0  # 0 (continuous time) / 1000 
  target_properties: null
  guidance_scale: 1.0 # This is the scale of the classifier-free guidance used during sampling. 

