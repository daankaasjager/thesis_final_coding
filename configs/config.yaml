defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: kraken
  - /noise: loglinear # Model appeared invariant to noise schedule types in MDLM paper
  - /model: small
  - /lr_scheduler: constant_warmup # cosine decay not implemented yet


train_test_split:
  train: 0.8
  valid: 0.2

local_paths:
  tokenizer: data/kraken/tokenizer
  train_data_encoding: data/kraken/training_data/train_data_encoding.pt
  original_data: data/kraken/training_data/descriptors_v3.csv
  augmented_data: data/kraken/training_data/augmented_descriptors_v3.csv
  pre_processed_data: data/kraken/training_data/preprocessed_data.pt
  sampled_data: data/kraken/sampled_data/generated_samples.json
  temp_path: data/kraken/sampled_data/temp.tmp
  metrics_dir: data/kraken/metric_plots
  synthesize_dir: data/kraken/synthesized_molecules
  selfies_nospace_txt: data/kraken/training_data/selfies_nospace.txt
  selfies_whitespace_txt: data/kraken/training_data/selfies_whitespace.txt
  selfies_alphabet: data/kraken/training_data/selfies_alphabet.txt
  selfies_ape_vocab: data/kraken/tokenizer/selfies_ape_vocab.json


mode: train  # augment / train / generate /evaluate
seed: 1
permitted_selfies_length: 175 # CHANGE THIS TO THE ACTUAL PERCENTILE LATER
diffusion: absorbing_state
backbone: dit  # dit / dimamba / ar
parameterization: subs  # subs / d3pm / sedd
time_conditioning: False
T: 0  # 0 (continuous time) / 1000 
row_limit: null
augmentation_n: 10 # Number of augmentations per molecule

tokenizer:
  tokenizer_type: APE # wordlevel, etc.
  vocab_size: 54
  max_vocab_size: 200 # EXPERIMENT WITH THIS!!!! pairs for APE
  min_freq_for_merge: 10 #min frequency of pairs for APE

checkpointing:
  save_dir: ${cwd:}
  resume_from_ckpt: false
  resume_ckpt_path: ${cwd:}/checkpoints/best-v6.ckpt
  fresh_data: false
  retrain_tokenizer: True
  retrain_ape_vocab: True

wandb:
  project: SELFIES-diffusion
  notes: testing a selfies model
  group: null # Groups related runs
  job_type: training # Type of job (e.g., training, evaluation)
  name: tokenizer_update # Name of the run
  id: ${.name}_${seed} #Sets unique name and seed
  tags:
    - ${noise.type} # Sets metadata tags for filtering runs
    - ${data.train}
    - ${data.valid}

training:
  ema: 0.9999
  antithetic_sampling: True
  importance_sampling: False
  sampling_eps: 1e-3
  change_of_variables: False

eval:
  checkpoint_path: ${cwd:}/checkpoints/12_hour_run_24_april.ckpt # Used to evaluate a checkpoint after training.
  disable_ema: False
  generate_samples: True
  overwrite_original: False
  plot_dist: False


sampling:
  predictor: ddpm_cache  # analytic, ddpm, ddpm_cache
  steps: 128
  noise_removal: True
  num_sample_batches: 12  # Total samples: `loader.eval_batch_size` * num_sample_batches
  num_sample_log: 2
  semi_ar: False
  num_strides: 0
  stride_length: 0

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8


# This is important when working with multi-GPU training, to ensure that 
# the batch size is divided evenly among all GPUs.
loader:
  global_batch_size: 16
  eval_global_batch_size: ${.global_batch_size}
  # Note: batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: 4
  pin_memory: True

# This is the config for training the Lightning trainer model
trainer:
  _target_: lightning.Trainer
  accelerator: auto
  strategy: auto # Let lightning choose wtvr
  num_nodes: 1 # Number of machines, which might have multiple GPUs
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0 # Clip gradients to this value. Prevents exploding gradients
  precision: '32' # BF16 float precision is better. CHANGE FOR LINUX
  num_sanity_val_steps: 1 # Runs 1 validation steps before training
  max_steps: 1_000_000 # Maximum number of training steps
  log_every_n_steps: 45 # log metrics every 10 steps
  limit_train_batches: 1.0   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 0.5     # validate on full dataset, can be used to toggle quick run
  check_val_every_n_epoch: 1 # validate every epoch
