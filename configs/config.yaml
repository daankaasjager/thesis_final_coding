defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: kraken
  - /noise: loglinear # Model appeared invariant to noise schedule types in MDLM paper
  - /model: small
  - /lr_scheduler: constant_warmup # cosine decay not implemented yet
  - /mode: train  # train / sample /evaluate_samples

train_test_split:
  train: 0.8
  valid: 0.2

directory_paths:
  tokenizer: data/vocab_list/tokenizer
  train_data_encoding: data/vocab_list/train_data_encoding.pt
  raw_data: data/kraken/descriptors_v3.csv
  pre_processed_data: data/kraken/preprocessed_data.pt
  cache_dir: /kraken_cache/data
  sampled_data: data/kraken/sampled_data
  metrics_dir: data/kraken/metrics
  synthesize_dir: data/kraken/synthesize

seed: 1

permitted_selfies_length: 175 # CHANGE THIS TO THE ACTUAL PERCENTILE LATER
diffusion: absorbing_state
backbone: dit  # dit / dimamba / ar
parameterization: subs  # subs / d3pm / sedd
time_conditioning: False
T: 0  # 0 (continuous time) / 1000 
subs_masking: False #prevents unmasking during training SET TO TRUE LATER FOR TESTING
plot_dist: True # this is for evaluating samples
row_limit: Null
overwrite_original: False # this is for evaluating samples


checkpointing:
  save_dir: ${cwd:}
  resume_from_ckpt: false
  resume_ckpt_path: ${cwd:}/checkpoints/best-v1.ckpt
  fresh_data: true

wandb:
  project: SELFIES-diffusion
  notes: testing a selfies model
  group: null # Groups related runs
  job_type: training # Type of job (e.g., training, evaluation)
  name: tokenizer_update # Name of the run
  id: ${.name}_${seed} #Sets unique name and seed
  tags:
    - ${noise.type} # Sets metadata tags for filtering runs
    - ${data.train}
    - ${data.valid}

training:
  ema: 0.9999
  antithetic_sampling: True
  importance_sampling: False
  sampling_eps: 1e-3
  change_of_variables: False

eval:
  checkpoint_path: ${cwd:}/checkpoints/best.ckpt # Used to evaluate a checkpoint after training.
  disable_ema: False
  generate_samples: True


sampling:
  predictor: ddpm_cache  # analytic, ddpm, ddpm_cache
  steps: 128
  noise_removal: True
  num_sample_batches: 12  # Total samples: `loader.eval_batch_size` * num_sample_batches
  num_sample_log: 2
  semi_ar: False
  num_strides: 16
  stride_length: 4

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8


# This is important when working with multi-GPU training, to ensure that 
# the batch size is divided evenly among all GPUs.
loader:
  global_batch_size: 16
  eval_global_batch_size: ${.global_batch_size}
  # Note: batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: 4
  pin_memory: True

# This is the config for training the Lightning trainer model
trainer:
  _target_: lightning.Trainer
  accelerator: auto
  strategy: auto # Let lightning choose wtvr
  num_nodes: 1 # Number of machines, which might have multiple GPUs
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0 # Clip gradients to this value. Prevents exploding gradients
  precision: '32' # BF16 float precision is better. CHANGE FOR LINUX
  num_sanity_val_steps: 1 # Runs 1 validation steps before training
  max_steps: 1_000_000 # Maximum number of training steps
  log_every_n_steps: 45 # log metrics every 10 steps
  limit_train_batches: 1.0   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 0.1     # validate on full dataset, can be used to toggle quick run
  val_check_interval: 0.9 # Run validation every epoch (too often right now)
