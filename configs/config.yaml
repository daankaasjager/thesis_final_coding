defaults:
  - _self_
  - /callbacks: [checkpoint_every_n_steps, checkpoint_monitor, learning_rate_monitor]
  - /data: kraken
  - /noise: loglinear # Model appeared invariant to noise schedule types in MDLM paper
  - /model: small
  - /lr_scheduler: constant_warmup # cosine decay not implemented yet


train_test_split:
  train: 0.8
  valid: 0.2

local_paths:
  tokenizer: data/kraken/tokenizer
  train_data_encoding: data/kraken/training_data/train_data_encoding
  original_data: data/kraken/training_data/descriptors_v3.csv
  augmented_data: data/kraken/training_data/augmented_descriptors_v3.csv
  pre_processed_data: data/kraken/training_data/preprocessed_data.parquet
  sampled_data: data/kraken/sampled_data/generated_samples.json
  temp_path: data/kraken/sampled_data/temp.tmp
  metrics_dir: data/kraken/metric_plots
  synthesize_dir: data/kraken/synthesized_molecules
  selfies_alphabet: data/kraken/training_data/selfies_alphabet.txt
  selfies_ape_vocab: data/kraken/tokenizer/selfies_ape_vocab.json
  mean_std: data/kraken/training_data/mean_std.json


mode: train
seed: 1
diffusion: absorbing_state
backbone: dit  # dit / dimamba / ar
parameterization: subs  # subs / d3pm / sedd
time_conditioning: False
T: 0  # 0 (continuous time) / 1000 
row_limit: null
debug: True

preprocessing:
  normalize: True
  augment: True
  augmentations_per_molecule: 10
  augmentations_max_attempts: 50
  discretize: True
  discretize_num_bins: 3
  permitted_selfies_length: 175 # CHANGE THIS TO THE ACTUAL PERCENTILE LATER

tokenizer:
  tokenizer_type: wordlevel # wordlevel
  max_vocab_size: 200 # EXPERIMENT WITH THIS!!!! pairs for APE
  min_freq_for_merge: 500 #min frequency of pairs for APE

checkpointing:
  save_dir: ${cwd:}
  resume_from_ckpt: False
  resume_ckpt_path: ${cwd:}/checkpoints/best.ckpt
  fresh_data: False
  retrain_tokenizer: False
  retrain_ape_vocab: False

wandb:
  project: SELFIES-diffusion
  notes: testing a selfies model
  group: null # Groups related runs
  job_type: training # Type of job (e.g., training, evaluation)
  name: tokenizer_update # Name of the run
  id: ${.name}_${seed} #Sets unique name and seed
  tags:
    - ${noise.type} # Sets metadata tags for filtering runs
    - ${data.train}
    - ${data.valid}

# This is important when working with multi-GPU training, to ensure that 
# the batch size is divided evenly among all GPUs.
loader:
  global_batch_size: 16
  eval_global_batch_size: ${.global_batch_size}
  # Note: batch_size and eval_batch_size are **per machine**
  batch_size: ${div_up:${.global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  eval_batch_size: ${div_up:${.eval_global_batch_size}, ${eval:${trainer.devices} * ${trainer.num_nodes}}}
  num_workers: 4
  pin_memory: True

#conditioning possibilities: ['nbo_P', 'nmr_P', 'pyr_P', 'fmo_mu', 'vmin_r', 'volume', 'fmo_eta', 
#'fukui_m', 'fukui_p', 'nuesp_P', 'somo_rc', 'nbo_P_rc', 'pyr_alpha', 'qpole_amp', 'vbur_vbur', 
#'Pint_P_min', 'sterimol_L', 'sterimol_B1', 'sterimol_B5', 'dipolemoment', 'efgtens_xx_P', 
#'efgtens_yy_P', 'nbo_bd_e_max', 'nbo_lp_P_occ', 'qpoletens_yy', 'E_solv_elstat', 'nbo_bds_e_avg', 
#'sterimol_burL', 'nbo_bd_occ_avg', 'sterimol_burB5', 'vbur_ovbur_min', 'vbur_qvbur_min', 
#'nbo_bds_occ_max', 'vbur_ratio_vbur_vtot', 'mol_wt', 'sa_score']
conditioning: 
  properties: ['sa_score','vmin_r','vbur_vbur'] # This is the list of properties to condition on
  prepend: False # This turns on the prepending of the conditioning properties e.g., '[vbur_vbur_bin_3|3][F][C][Branch1][C][F][Branch1]''
  embeddings: False # This turns on the embeddings for the conditioning properties
  cfg: True # This turns on the classifier-free guidance. ! If this is true, then embeddings must also be true !
  cfg_prob: 0.2 # This is the probability of using the conditioning properties (0.1-0.2 is a good range usually)
  guidance_scale: 1.0 # This is the scale of the classifier-free guidance used during sampling. 
  force_unconditioned: False # This forces the model to ignore the conditioning properties.
  

training:
  ema: 0.9999
  antithetic_sampling: True
  importance_sampling: False
  sampling_eps: 1e-3
  change_of_variables: False

optim:
  weight_decay: 0
  lr: 3e-4
  beta1: 0.9
  beta2: 0.999
  eps: 1e-8

# This is the config for training the Lightning trainer model
trainer:
  _target_: lightning.Trainer
  accelerator: auto
  strategy: auto # Let lightning choose wtvr
  num_nodes: 1 # Number of machines, which might have multiple GPUs
  devices: ${device_count:}
  accumulate_grad_batches: ${div_up:${loader.global_batch_size}, ${eval:${trainer.devices} * ${loader.batch_size} * ${trainer.num_nodes}}}
  gradient_clip_val: 1.0 # Clip gradients to this value. Prevents exploding gradients
  precision: '32' # BF16 float precision is better. CHANGE FOR LINUX
  num_sanity_val_steps: 1 # Runs 1 validation steps before training
  max_steps: 10_000_000 # Maximum number of training steps
  log_every_n_steps: 45 # log metrics every 10 steps
  limit_train_batches: 1.0   # train on full dataset, can be used to toggle quick run
  limit_val_batches: 1.0    # validate on full dataset, can be used to toggle quick run
  val_check_interval: 0.25 # validate every epoch
  #check_val_every_n_epoch: 1 # validate every epoch

eval:
  checkpoint_path: ${cwd:}/checkpoints/12_hour_run_24_april.ckpt # Used to evaluate a checkpoint after training.
  disable_ema: False
  generate_samples: True
  overwrite_original: False
  plot_dist: False

sampling:
  predictor: ddpm_cache  # analytic, ddpm, ddpm_cache
  steps: 128
  noise_removal: True
  num_sample_batches: 12  # Total samples: `loader.eval_batch_size` * num_sample_batches
  num_sample_log: 2
  semi_ar: False
  num_strides: 0
  stride_length: 0

